trigger:
  branches:
    include: [pages-source]
  paths:
    exclude: [README.md, LICENSE.md, .gitignore]

# PR always trigger build   
pr:
  autoCancel: true

resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

# need this here in order to persist GitHub credentials
- checkout: self
  persistCredentials: true

# setup GitHub credentials and prefs
- script: |
    git config --global user.email "nfbot"
    git config --global user.name "nanoframework@outlook.com"

    git config --global core.autocrlf true
  displayName: Setup git identity

# clone class libs repos
# fetch only the last 100 commits to be (reasonaly) sure that we have the history up to the last tag
- powershell: |
      git clone https://github.com/nanoframework/CoreLibrary.git --recursive --depth 100 -b develop CoreLibrary 

      git clone https://github.com/nanoframework/nanoFramework.Devices.Can.git --depth 100 -b develop nanoFramework.Devices.Can 

      git clone https://github.com/nanoframework/nanoFramework.Devices.OneWire.git --depth 100 -b develop nanoFramework.Devices.OneWire 

      git clone https://github.com/nanoframework/nanoFramework.Runtime.Events.git --depth 100 -b develop nanoFramework.Runtime.Events 

      git clone https://github.com/nanoframework/nanoFramework.Runtime.Native.git --depth 100 -b develop nanoFramework.Runtime.Native 

      git clone https://github.com/nanoframework/nanoFramework.WebServer -b develop nanoFramework.WebServer 

      git clone https://github.com/nanoframework/System.Device.Dac.git --depth 100 -b develop System.Device.Dac

      git clone https://github.com/nanoframework/System.Device.Gpio.git --depth 100 -b develop System.Device.Gpio 

      git clone https://github.com/nanoframework/Windows.Devices.Gpio.git --depth 100 -b develop Windows.Devices.Gpio 

      git clone https://github.com/nanoframework/Windows.Devices.I2c.git --depth 100 -b develop Windows.Devices.I2c 

      git clone https://github.com/nanoframework/System.Device.I2c.git --depth 100 -b develop System.Device.I2c

      git clone https://github.com/nanoframework/System.IO.FileSystem.git --depth 100 -b develop System.IO.FileSystem

      git clone https://github.com/nanoframework/Windows.Devices.Pwm.git --depth 100 -b develop Windows.Devices.Pwm 

      git clone https://github.com/nanoframework/Windows.Devices.SerialCommunication.git -b develop Windows.Devices.SerialCommunication 

      git clone https://github.com/nanoframework/Windows.Devices.Spi.git --depth 100 -b develop Windows.Devices.Spi 

      git clone https://github.com/nanoframework/System.Device.Spi.git --depth 100 -b develop System.Device.Spi

      git clone https://github.com/nanoframework/Windows.Storage.git --depth 100 -b develop Windows.Storage 

      git clone https://github.com/nanoframework/Windows.Storage.Streams.git --depth 100 -b develop Windows.Storage.Streams 

      git clone https://github.com/nanoframework/Windows.Devices.Adc.git --depth 100 -b develop Windows.Devices.Adc 

      git clone https://github.com/nanoframework/Windows.Devices.WiFi.git --depth 100 -b develop Windows.Devices.WiFi 

      git clone https://github.com/nanoframework/nanoFramework.Graphics -b develop nanoFramework.Graphics 

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Esp32 -b develop nanoFramework.Hardware.Esp32

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Esp32.Rmt -b develop nanoFramework.Hardware.Esp32.Rmt

      git clone https://github.com/nanoframework/nanoFramework.Json -b develop nanoFramework.Json

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Stm32 -b develop nanoFramework.Hardware.Stm32

      git clone https://github.com/nanoframework/nanoFramework.ResourceManager -b develop nanoFramework.ResourceManager

      git clone https://github.com/nanoframework/nanoFramework.Networking.Sntp -b develop nanoFramework.Networking.Sntp 

      git clone https://github.com/nanoframework/System.Collections -b develop System.Collections 

      git clone https://github.com/nanoframework/System.Text -b develop System.Text 

      git clone https://github.com/nanoframework/System.Net -b develop System.Net 

      git clone https://github.com/nanoframework/System.Net.Http -b develop System.Net.Http 

      git clone https://github.com/nanoframework/nanoFramework.TI.EasyLink -b develop nanoFramework.TI.EasyLink

      git clone https://github.com/nanoframework/nanoFramework.Hardware.TI -b develop nanoFramework.Hardware.TI

      git clone https://github.com/nanoframework/System.Math -b develop System.Math 

      git clone https://github.com/nanoframework/nanoFramework.Logging -b develop nanoFramework.Logging

      git clone https://github.com/nanoframework/System.IO.Ports.git --depth 100 -b develop System.IO.Ports

      git clone https://github.com/nanoframework/nanoFramework.m2mqtt.git --depth 100 -b develop nanoFramework.M2Mqtt

      git clone https://github.com/nanoframework/System.Text.RegularExpressions.git --depth 100 -b develop System.Text.RegularExpressions

      git clone https://github.com/nanoframework/nanoFramework.Azure.Devices.git --depth 100 -b develop nanoFramework.Azure.Devices

      git clone https://github.com/nanoframework/nanoFramework.IoT.Device.git -b develop nanoFramework.IoT.Device

      git clone https://github.com/Ellerbach/docfx-companion-tools.git -b main DocFxCompanion

  displayName: Clone repos of class libs

# install docfx
- powershell: choco install docfx -y
  displayName: Install docfx

# Create the README in /devices folder with all IoT.Device bindings
# Run the Generator to physically move the files first
- task: DotNetCoreCLI@2
  displayName: 'Generate all the devices README files'
  inputs:
    command: 'run'
    projects: 'nanoFramework.IoT.Device\src\GenerateDocFxStructure'
    arguments: '-- -d $(System.DefaultWorkingDirectory)\devicesdetails -m $(System.DefaultWorkingDirectory)\devicesimages -s nanoFramework.IoT.Device/devices -v -r https://github.com/nanoFramework/nanoFramework.IoT.Device -i packages,tests'

- task: DotNetCoreCLI@2
  displayName: 'Building automatically toc.yml'
  inputs:
    command: 'run'
    projects: 'DocFxCompanion/src/TocDocFxCreation'
    arguments: '-d $(System.DefaultWorkingDirectory)\devicesdetails -si'

# build all libs
- template: azure-pipelines-templates/install-nuget.yml@templates

- task: NuGetCommand@2
  displayName: NuGet restore CoreLibrary
  inputs:
    restoreSolution: 'CoreLibrary\nanoFramework.CoreLibrary.sln'
    feedsToUse: config
    nugetConfigPath: 'CoreLibrary\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Devices.Can
  inputs:
    restoreSolution: 'nanoFramework.Devices.Can\nanoFramework.Devices.Can.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Devices.Can\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Devices.OneWire
  inputs:
    restoreSolution: 'nanoFramework.Devices.OneWire\nanoFramework.Devices.OneWire.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Devices.OneWire\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Runtime.Events
  inputs:
    restoreSolution: 'nanoFramework.Runtime.Events\nanoFramework.Runtime.Events.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Runtime.Events\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Runtime.Native
  inputs:
    restoreSolution: 'nanoFramework.Runtime.Native\nanoFramework.Runtime.Native.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Runtime.Native\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.WebServer
  inputs:
    restoreSolution: 'nanoFramework.WebServer\nanoFramework.WebServer.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.WebServer\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Device.Dac
  inputs:
    restoreSolution: 'System.Device.Dac\nanoFramework.System.Device.Dac.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Device.Dac\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Device.Gpio
  inputs:
    restoreSolution: 'System.Device.Gpio\nanoFramework.System.Device.Gpio.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Device.Gpio\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.Gpio
  inputs:
    restoreSolution: 'Windows.Devices.Gpio\nanoFramework.Windows.Devices.Gpio.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.Gpio\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.I2c
  inputs:
    restoreSolution: 'Windows.Devices.I2c\nanoFramework.Windows.Devices.I2c.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.I2c\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Device.I2c
  inputs:
    restoreSolution: 'System.Device.I2c\nanoFramework.System.Device.I2c.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Device.I2c\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.IO.FileSystem
  inputs:
    restoreSolution: 'System.IO.FileSystem\nanoFramework.System.IO.FileSystem.sln'
    feedsToUse: config
    nugetConfigPath: 'System.IO.FileSystem\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.Pwm
  inputs:
    restoreSolution: 'Windows.Devices.Pwm\nanoFramework.Windows.Devices.Pwm.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.Pwm\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.SerialCommunication
  inputs:
    restoreSolution: 'Windows.Devices.SerialCommunication\nanoFramework.Windows.Devices.SerialCommunication.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.SerialCommunication\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.Spi
  inputs:
    restoreSolution: 'Windows.Devices.Spi\nanoFramework.Windows.Devices.Spi.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.Spi\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Device.Spi
  inputs:
    restoreSolution: 'System.Device.Spi\System.Device.Spi.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Device.Spi\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Storage
  inputs:
    restoreSolution: 'Windows.Storage\nanoFramework.Windows.Storage.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Storage\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Storage.Streams
  inputs:
    restoreSolution: 'Windows.Storage.Streams\nanoFramework.Windows.Storage.Streams.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Storage.Streams\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.Adc
  inputs:
    restoreSolution: 'Windows.Devices.Adc\nanoFramework.Windows.Devices.Adc.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.Adc\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore Windows.Devices.WiFi
  inputs:
    restoreSolution: 'Windows.Devices.WiFi\nanoFramework.Windows.Devices.WiFi.sln'
    feedsToUse: config
    nugetConfigPath: 'Windows.Devices.WiFi\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Graphics
  inputs:
    restoreSolution: 'nanoFramework.Graphics\nanoFramework.Graphics.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Graphics\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Hardware.Esp32
  inputs:
    restoreSolution: 'nanoFramework.Hardware.Esp32\nanoFramework.Hardware.Esp32.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Hardware.Esp32\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Hardware.Esp32.Rmt
  inputs:
    restoreSolution: 'nanoFramework.Hardware.Esp32.Rmt\nanoFramework.Hardware.Esp32.Rmt.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Hardware.Esp32.Rmt\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Json
  inputs:
    restoreSolution: 'nanoFramework.Json\nanoFramework.Json.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Json\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Hardware.Stm32
  inputs:
    restoreSolution: 'nanoFramework.Hardware.Stm32\nanoFramework.Hardware.Stm32.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Hardware.Stm32\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.ResourceManager
  inputs:
    restoreSolution: 'nanoFramework.ResourceManager\nanoFramework.ResourceManager.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.ResourceManager\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Networking.Sntp
  inputs:
    restoreSolution: 'nanoFramework.Networking.Sntp\nanoFramework.Networking.Sntp.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Networking.Sntp\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Collections
  inputs:
    restoreSolution: 'System.Collections\nanoFramework.System.Collections.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Collections\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Text
  inputs:
    restoreSolution: 'System.Text\nanoFramework.System.Text.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Text\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Net
  inputs:
    restoreSolution: 'System.Net\nanoFramework.System.Net.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Net\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Net.Http
  inputs:
    restoreSolution: 'System.Net.Http\nanoFramework.System.Net.Http.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Net.Http\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.TI.EasyLink
  inputs:
    restoreSolution: 'nanoFramework.TI.EasyLink\nanoFramework.TI.EasyLink.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.TI.EasyLink\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Hardware.TI
  inputs:
    restoreSolution: 'nanoFramework.Hardware.TI\nanoFramework.Hardware.TI.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Hardware.TI\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore System.Math
  inputs:
    restoreSolution: 'System.Math\nanoFramework.System.Math.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Math\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Logging
  inputs:
    restoreSolution: 'nanoFramework.Logging\nanoFramework.Logging.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Logging\NuGet.Config'
  
- task: NuGetCommand@2
  displayName: NuGet restore System.IO.Ports
  inputs:
    restoreSolution: 'System.IO.Ports\System.IO.Ports.sln'
    feedsToUse: config
    nugetConfigPath: 'System.IO.Ports\NuGet.Config'

- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.M2Mqtt
  inputs:
    restoreSolution: 'nanoFramework.M2Mqtt\nanoFramework.M2Mqtt.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.M2Mqtt\NuGet.Config'
      
- task: NuGetCommand@2
  displayName: NuGet restore System.Text.RegularExpressions
  inputs:
    restoreSolution: 'System.Text.RegularExpressions\nanoFramework.System.Text.RegularExpressions.sln'
    feedsToUse: config
    nugetConfigPath: 'System.Text.RegularExpressions\NuGet.Config'
      
- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.Azure.Devices
  inputs:
    restoreSolution: 'nanoFramework.Azure.Devices\nanoFramework.Azure.Devices.Client.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.Azure.Devices\NuGet.Config'

# we only need to reference the main nuget.config 
- task: NuGetCommand@2
  displayName: NuGet restore nanoFramework.IoT.Device
  inputs:
    restoreSolution: 'nanoFramework.IoT.Device\devices\**\*.sln'
    feedsToUse: config
    nugetConfigPath: 'nanoFramework.IoT.Device\NuGet.Config'

# Build part
- task: InstallnFBuildComponents@1
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  displayName: Build CoreLibrary
  inputs:
    solution: 'CoreLibrary\nanoFramework.CoreLibrary.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Devices.Can
  inputs:
    solution: 'nanoFramework.Devices.Can\nanoFramework.Devices.Can.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Devices.OneWire
  inputs:
    solution: 'nanoFramework.Devices.OneWire\nanoFramework.Devices.OneWire.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Runtime.Events
  inputs:
    solution: 'nanoFramework.Runtime.Events\nanoFramework.Runtime.Events.sln '
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Runtime.Native
  inputs:
    solution: 'nanoFramework.Runtime.Native\nanoFramework.Runtime.Native.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.WebServer
  inputs:
    solution: 'nanoFramework.WebServer\nanoFramework.WebServer.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Device.Dac
  inputs:
    solution: 'System.Device.Dac\nanoFramework.System.Device.Dac.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Device.Gpio
  inputs:
    solution: 'System.Device.Gpio\nanoFramework.System.Device.Gpio.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.Gpio
  inputs:
    solution: 'Windows.Devices.Gpio\nanoFramework.Windows.Devices.Gpio.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.I2c
  inputs:
    solution: 'Windows.Devices.I2c\nanoFramework.Windows.Devices.I2c.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Device.I2c
  inputs:
    solution: 'System.Device.I2c\nanoFramework.System.Device.I2c.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.IO.FileSystem
  inputs:
    solution: 'System.IO.FileSystem\nanoFramework.System.IO.FileSystem.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.Pwm
  inputs:
    solution: 'Windows.Devices.Pwm\nanoFramework.Windows.Devices.Pwm.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.SerialCommunication
  inputs:
    solution: 'Windows.Devices.SerialCommunication\nanoFramework.Windows.Devices.SerialCommunication.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.Spi
  inputs:
    solution: 'Windows.Devices.Spi\nanoFramework.Windows.Devices.Spi.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Device.Spi
  inputs:
    solution: 'System.Device.Spi\System.Device.Spi.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Storage
  inputs:
    solution: 'Windows.Storage\nanoFramework.Windows.Storage.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Storage.Streams
  inputs:
    solution: 'Windows.Storage.Streams\nanoFramework.Windows.Storage.Streams.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.Adc
  inputs:
    solution: 'Windows.Devices.Adc\nanoFramework.Windows.Devices.Adc.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build Windows.Devices.WiFi
  inputs:
    solution: 'Windows.Devices.WiFi\nanoFramework.Windows.Devices.WiFi.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Graphics
  inputs:
    solution: 'nanoFramework.Graphics\nanoFramework.Graphics.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Hardware.Esp32
  inputs:
    solution: 'nanoFramework.Hardware.Esp32\nanoFramework.Hardware.Esp32.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Hardware.Esp32.Rmt
  inputs:
    solution: 'nanoFramework.Hardware.Esp32.Rmt\nanoFramework.Hardware.Esp32.Rmt.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Json
  inputs:
    solution: 'nanoFramework.Json\nanoFramework.Json.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Hardware.Stm32
  inputs:
    solution: 'nanoFramework.Hardware.Stm32\nanoFramework.Hardware.Stm32.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Networking.Sntp
  inputs:
    solution: 'nanoFramework.Networking.Sntp\nanoFramework.Networking.Sntp.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Collections
  inputs:
    solution: 'System.Collections\nanoFramework.System.Collections.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Text
  inputs:
    solution: 'System.Text\nanoFramework.System.Text.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Net
  inputs:
    solution: 'System.Net\nanoFramework.System.Net.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Net.Http
  inputs:
    solution: 'System.Net.Http\nanoFramework.System.Net.Http.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Hardware.TI
  inputs:
    solution: 'nanoFramework.Hardware.TI\nanoFramework.Hardware.TI.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Math
  inputs:
    solution: 'System.Math\nanoFramework.System.Math.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Logging
  inputs:
    solution: 'nanoFramework.Logging\nanoFramework.Logging.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.IO.Ports
  inputs:
    solution: 'System.IO.Ports\System.IO.Ports.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.M2Mqtt
  inputs:
    solution: 'nanoFramework.M2Mqtt\nanoFramework.M2Mqtt.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build System.Text.RegularExpressions
  inputs:
    solution: 'System.Text.RegularExpressions\nanoFramework.System.Text.RegularExpressions.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

- task: VSBuild@1
  displayName: Build nanoFramework.Azure.Devices
  inputs:
    solution: 'nanoFramework.Azure.Devices\nanoFramework.Azure.Devices.Client.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  condition: succeeded()

# This should build all the bindings in nanoFramework.IoT.Device in the devices directory
- task: VSBuild@1
  displayName: Build nanoFramework.IoT.Device
  inputs:
    solution: 'nanoFramework.IoT.Device\devices\**\*.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  continueOnError: true

# Clean what's not needed from IoT.Device and adjust the nugets to remove nerdbank to help build
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\devices_generated
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\nanoFramework.IoT.Device.CodeConverter
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\GenerateDocFxStructure
      Remove-Item -Recurse -Force DocFxCompanion
      cd nanoFramework.IoT.Device\devices
      $Nerdbank = '<package id="Nerdbank.GitVersioning"'
      $Files = Get-ChildItem -Filter "packages.config" -Recurse
      foreach ($File in $Files) {
        $FullPath = $File | % { $_.FullName }
        $ToReplace = Get-Content $FullPath
        $Replaced = $ToReplace `
        | Where-Object { $_ -notmatch $Nerdbank }
        Set-Content -path $FullPath -Value $Replaced
      }
  displayName: Delete generated device folder from IoT.Device and clean references
  condition: succeeded()

# rename project files (need this to trick docfx)
- powershell: Get-ChildItem -Filter "*.nfproj" -Recurse | Rename-Item -NewName { $_.name -replace 'nfproj','csproj' }
  displayName: Rename nfproj files
  condition: succeeded()

# run docfx
- powershell: |
      &docfx metadata docfx.json
      
      if ($lastexitcode -ne 0)
      {
        throw [System.Exception] "docfx build failed with exit code $lastexitcode."
      }

      &docfx build docfx.json
      
      if ($lastexitcode -ne 0)
      {
        throw [System.Exception] "docfx build failed with exit code $lastexitcode."
      }
  condition: succeeded()
  displayName: Run docfx

# Make an artifact for debug purpose
- task: ArchiveFiles@2
  condition: succeeded()
  displayName: Zipping _site directory
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)\_site' 
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/site.zip' 
    replaceExistingArchive: true 

- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: Publish deployable artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: site
    ArtifactType: Container

# commit changes
- powershell: |
        git clone https://github.com/nanoframework/nanoframework.github.io.git -b master origin_site -q
        Copy-Item _site/* origin_site -recurse -Force
        
        cd origin_site > $null

        $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

        git add . -A > $null
        git commit -m "Update documentation from PR" -q > $null
        git -c http.extraheader="AUTHORIZATION: $auth" push origin master -q > $null
  failOnStderr: false
  ignoreLASTEXITCODE: true
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest') )
  displayName: Commit changes

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
