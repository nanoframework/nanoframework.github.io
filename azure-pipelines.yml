trigger:
  branches:
    include: 
      - pages-source
  paths:
    exclude: 
      - README.md
      - LICENSE
      - LICENSE-CODE
      - .gitignore
      - .markdownlint.json
      - docfx.json
      - CNAME
      - toc.yml

# PR always trigger build   
pr:
  autoCancel: true

resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-latest'

variables:
  DOTNET_NOLOGO: true
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

# need this here in order to persist GitHub credentials
- checkout: self
  persistCredentials: true
  fetchDepth: 1

# setup GitHub credentials and prefs
- script: |
    git config --global user.email "nfbot"
    git config --global user.name "nanoframework@outlook.com"

    git config --global core.autocrlf true
  displayName: Setup git identity

# get commit message
- powershell: |

    #####################
    # grab commit message
    if($env:System_PullRequest_PullRequestId -ne $null)
    {
        # PR build
        "Building from PR" | Write-Host

        # get PR message
        $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$env:System_PullRequest_PullRequestNumber"

        $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Method GET -Headers @{Authorization = "Bearer $(GitHubToken)"}

        $commitMessage = $commit.body
    }
    else
    {
        # not a PR, get subject and commit message for commit
        "Building from merge" | Write-Host

        $commitMessage = git log --format='%B' -1
    }

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage.Replace("`r`n", " ")

    "Commit message is: '$commitMessage'" | Write-Host

    # set variable to forward to jobs
    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$commitMessage"

    ###########################
    # get list of changed files
    if($env:System_PullRequest_PullRequestId -ne $null)
    {
        # get files changed in PR
        $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$env:System_PullRequest_PullRequestNumber/files" -ContentType "application/json" -Method GET -Headers @{Authorization = "Bearer $(GitHubToken)"}

        # filter removed files              
        $files = $commit.where{$_.status -ne 'removed'}

        # get file names only
        $files = $files | % {$_.filename}

        Write-host "Files changed:"
        $files | % { Write-host $_ }
        Write-host ""

        if( 
          (($files.where{$_.Contains('/')}).Count -eq 0) -Or
          (($files.where{$_.StartsWith('x-cross')}).Count -gt 0)
        )
        {
            # files at:
            # - repo root
            # - x-cross folder

            echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
            
            Write-host "Building ALL"
        }
        else
        {
            echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]false"
            Write-host "Only content files changed, skipping build"
        }
    }
    else
    {
        # this is not a PR, need to build everything
        echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
    }

  name: BuildOptions
  displayName: Get commit details

# clone class libs repos
# fetch only the last 100 commits (if available) to be (reasonaly) sure that we have the history up to the last tag
- powershell: |
      git clone https://github.com/nanoframework/CoreLibrary.git --recursive --depth 100 -b main libs/CoreLibrary 

      git clone https://github.com/nanoframework/nanoFramework.Device.Can.git --depth 100 -b main libs/nanoFramework.Device.Can 

      git clone https://github.com/nanoframework/nanoFramework.Device.OneWire.git --depth 100 -b main libs/nanoFramework.Device.OneWire 

      git clone https://github.com/nanoframework/nanoFramework.Runtime.Events.git --depth 100 -b main libs/nanoFramework.Runtime.Events 

      git clone https://github.com/nanoframework/nanoFramework.Runtime.Native.git --depth 100 -b main libs/nanoFramework.Runtime.Native 

      git clone https://github.com/nanoframework/nanoFramework.WebServer -b main libs/nanoFramework.WebServer 

      git clone https://github.com/nanoframework/nanoFramework.DependencyInjection -b main libs/nanoFramework.DependencyInjection 

      git clone https://github.com/nanoframework/nanoFramework.Hosting -b main libs/nanoFramework.Hosting 

      git clone https://github.com/nanoframework/System.Device.Dac.git --depth 100 -b main libs/System.Device.Dac

      git clone https://github.com/nanoframework/System.Device.Gpio.git --depth 100 -b main libs/System.Device.Gpio 

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.Gpio.git --depth 100 -b main libs/Windows.Devices.Gpio 

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.I2c.git --depth 100 -b main libs/Windows.Devices.I2c 

      git clone https://github.com/nanoframework/System.Device.I2c.git --depth 100 -b main libs/System.Device.I2c

      git clone https://github.com/nanoframework/System.Device.I2s.git --depth 100 -b main libs/System.Device.I2s

      git clone https://github.com/nanoframework/System.IO.FileSystem.git --depth 100 -b main libs/System.IO.FileSystem

      git clone https://github.com/nanoframework/System.IO.Streams.git --depth 100 -b main libs/System.IO.Streams

      git clone https://github.com/nanoframework/System.Runtime.Serialization.git --depth 100 -b main libs/System.Runtime.Serialization

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.Pwm.git --depth 100 -b main libs/Windows.Devices.Pwm 

      git clone https://github.com/nanoframework/System.Device.Pwm.git --depth 100 -b main libs/System.Device.Pwm

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.SerialCommunication.git -b main libs/Windows.Devices.SerialCommunication 

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.Spi.git --depth 100 -b main libs/Windows.Devices.Spi 

      git clone https://github.com/nanoframework/System.Device.Spi.git --depth 100 -b main libs/System.Device.Spi

      git clone https://github.com/nanoframework/Windows.Storage.git --depth 100 -b main libs/Windows.Storage 

      git clone https://github.com/nanoframework/Windows.Storage.Streams.git --depth 100 -b main libs/Windows.Storage.Streams 

      # removing as this one is deprecated and is not building in VS2022
      # git clone https://github.com/nanoframework/Windows.Devices.Adc.git --depth 100 -b main libs/Windows.Devices.Adc 
      
      git clone https://github.com/nanoframework/System.Device.Adc.git --depth 100 -b main libs/System.Device.Adc 

      git clone https://github.com/nanoframework/System.Device.WiFi.git --depth 100 -b main libs/System.Device.WiFi 

      git clone https://github.com/nanoframework/nanoFramework.Benchmark -b main libs/nanoFramework.Benchmark 

      git clone https://github.com/nanoframework/nanoFramework.Graphics -b main libs/nanoFramework.Graphics 

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Esp32 -b main libs/nanoFramework.Hardware.Esp32

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Esp32.Rmt -b main libs/nanoFramework.Hardware.Esp32.Rmt

      git clone https://github.com/nanoframework/nanoFramework.Json -b main libs/nanoFramework.Json

      git clone https://github.com/nanoframework/nanoFramework.Hardware.Stm32 -b main libs/nanoFramework.Hardware.Stm32

      git clone https://github.com/nanoframework/nanoFramework.ResourceManager -b main libs/nanoFramework.ResourceManager

      git clone https://github.com/nanoframework/nanoFramework.Networking.Sntp -b main libs/nanoFramework.Networking.Sntp 

      git clone https://github.com/nanoframework/System.Collections -b main libs/System.Collections 

      git clone https://github.com/nanoframework/System.Text -b main libs/System.Text 

      git clone https://github.com/nanoframework/System.Net -b main libs/System.Net 

      git clone https://github.com/nanoframework/System.Net.Http -b main libs/System.Net.Http 

      git clone https://github.com/nanoframework/System.Net.WebSockets -b main libs/System.Net.WebSockets 

      git clone https://github.com/nanoframework/nanoFramework.TI.EasyLink -b main libs/nanoFramework.TI.EasyLink

      git clone https://github.com/nanoframework/nanoFramework.Hardware.TI -b main libs/nanoFramework.Hardware.TI

      git clone https://github.com/nanoframework/System.Math -b main libs/System.Math 

      git clone https://github.com/nanoframework/nanoFramework.Logging -b main libs/nanoFramework.Logging

      git clone https://github.com/nanoframework/System.IO.Ports.git --depth 100 -b main libs/System.IO.Ports

      git clone https://github.com/nanoframework/nanoFramework.m2mqtt.git --depth 100 -b main libs/nanoFramework.M2Mqtt

      git clone https://github.com/nanoframework/System.Text.RegularExpressions.git --depth 100 -b main libs/System.Text.RegularExpressions

      git clone https://github.com/nanoframework/nanoFramework.Azure.Devices.git -b main libs/nanoFramework.Azure.Devices
      
      git clone https://github.com/nanoframework/nanoFramework.Aws.IoTCore.Devices.git -b main libs/nanoFramework.Aws.IoTCore.Devices

      git clone https://github.com/nanoframework/nanoFramework.SignalR.Client.git -b main libs/nanoFramework.SignalR.Client      

      git clone https://github.com/nanoframework/System.Net.Sockets.TcpClient.git -b main libs/System.Net.Sockets.TcpClient

      git clone https://github.com/nanoframework/System.Net.Sockets.UdpClient.git -b main libs/System.Net.Sockets.UdpClient
  displayName: Clone repos of class libs
  condition: >-
    or(
      eq(variables['BUILD_ALL'], 'true'),
      contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
      eq(variables['BuildOptions.BUILD_ALL'], 'true')
    )

# clone IoT bindings repo
- powershell: |
      git clone https://github.com/nanoframework/nanoFramework.IoT.Device.git -b develop nanoFramework.IoT.Device
  displayName: Clone IoT binding repo
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )

# Clean all solutions that are not needed to build nor generate documentation
- task: PowerShell@2
  displayName: Delete unnecessary solutions
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    ) 
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Force libs\CoreLibrary\nanoFramework.TestFramework\nanoFramework.TestAdapter.sln
      Remove-Item -Force libs\nanoFramework.M2Mqtt\nanoFramework.Mqtt.TestApps.sln

- powershell: choco install docfx-companion-tools -y
  displayName: Install the docfx helpers
  condition: succeeded()

# install docfx
- powershell: choco install docfx -y
  displayName: Install docfx
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )

# Create the README in /devices folder with all IoT.Device bindings
# Run the Generator to physically move the files first
- task: DotNetCoreCLI@2
  displayName: 'Generate all the devices README files'
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    command: 'run'
    projects: 'nanoFramework.IoT.Device\src\GenerateDocFxStructure'
    arguments: '-- -d $(System.DefaultWorkingDirectory)\devicesdetails -m $(System.DefaultWorkingDirectory)\devicesimages -s nanoFramework.IoT.Device/devices -v -r https://github.com/nanoFramework/nanoFramework.IoT.Device -i packages,tests'

- powershell: |
    &DocFxTocGenerator -d $(System.DefaultWorkingDirectory)\devicesdetails -si
  displayName: 'Building automatically toc.yml for devices'
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )

- powershell: |
    &DocFxTocGenerator -d $(System.DefaultWorkingDirectory)\content -s -r -g
  displayName: 'Building automatically toc.yml for main content'
  condition: succeeded()

# Check the links
- powershell: |
    &DocLinkChecker -d $(System.DefaultWorkingDirectory)\content -t
  displayName: 'Check internal links in the core repo'
  condition: succeeded()

# Scan markdown files on style consistency
- powershell: |
    npm install -g markdownlint-cli
    markdownlint -c  $(System.DefaultWorkingDirectory)/.markdownlint.json $(System.DefaultWorkingDirectory)/content
  displayName: 'Execute Markdownlint'
  condition: succeeded()

# we then need to add the root index page to the toc
- powershell: |
    # read all lines into `$fileContents`
    $filePath = "$(System.DefaultWorkingDirectory)\content\toc.yml"
    $fileContents = Get-Content $filePath 

    # append text to desired line
    $textToAdd = "items:
    - name: Home
      href: ../index.md"
    $fileContents[1] = $fileContents[1].Replace("items:", $textToAdd)
    
    # write all lines back to file
    $fileContents | Set-Content $filePath
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  displayName: Adjust TOC to add main index

# install specific version of nuget CLI
- template: azure-pipelines-templates/install-nuget.yml@templates

- task: Cache@2
  displayName: Cache NuGet packages
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  continueOnError: true
  inputs:
    key: 'nuget | **/packages.lock.json'
    path: $(UserProfile)/.nuget/packages

# restore all solutions
- task: NuGetCommand@2
  displayName: NuGet restore all class libs
  retryCountOnTaskFailure: 3
  inputs:
    restoreSolution: 'libs/**/*.sln'
    feedsToUse: 'select'

# Build part
- task: InstallNanoMSBuildComponents@1
  displayName: Install nanoFramework MSBuild components
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    GitHubToken: $(GitHubToken)

# this is required for IoT bindings build
- task: DotNetCoreCLI@2  
  displayName: Install nanovc tool
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    command: custom
    custom: tool
    arguments: install -g nanovc --add-source https://pkgs.dev.azure.com/nanoframework/feed/_packaging/sandbox/nuget/v3/index.json
  
# This will build all class libraries in the libs folder
- task: VSBuild@1
  displayName: Build all class libs
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  retryCountOnTaskFailure: 3
  inputs:
    solution: 'libs/**/*.sln'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    maximumCpuCount: true

# This should build all the bindings in nanoFramework.IoT.Device in the devices directory
- task: PowerShell@2
  displayName: Build all from nanoFramework.IoT.Device
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    workingDirectory: 'nanoFramework.IoT.Device\devices'
    targetType: 'filePath'
    filePath: 'nanoFramework.IoT.Device\.pipeline-assets\pipeline-build-solutions.PS1'
  env:
    MY_GITHUBTOKEN: $(GitHubToken)
    DEVICE_TO_BUILD: 'ALL'

# Clean what's not needed from IoT.Device and adjust the nugets to remove nerdbank to help build
- task: PowerShell@2
  displayName: Delete generated device folder from IoT.Device and clean references
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\devices_generated
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\nanoFramework.IoT.Device.CodeConverter
      Remove-Item -Recurse -Force nanoFramework.IoT.Device\src\GenerateDocFxStructure
      cd nanoFramework.IoT.Device\devices
      $Nerdbank = '<package id="Nerdbank.GitVersioning"'
      $Files = Get-ChildItem -Filter "packages.config" -Recurse
      foreach ($File in $Files) {
        $FullPath = $File | % { $_.FullName }
        $ToReplace = Get-Content $FullPath
        $Replaced = $ToReplace `
        | Where-Object { $_ -notmatch $Nerdbank }
        Set-Content -path $FullPath -Value $Replaced
      }

# rename project files (need this to trick docfx)
- powershell: Get-ChildItem -Filter "*.nfproj" -Recurse | Rename-Item -NewName { $_.name -replace 'nfproj','csproj' }
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  displayName: Rename nfproj files

# run docfx
- powershell: |
      &docfx metadata docfx.json
      
      if ($lastexitcode -ne 0)
      {
        throw [System.Exception] "docfx build failed with exit code $lastexitcode."
      }

      &docfx build docfx.json
      
      if ($lastexitcode -ne 0)
      {
        throw [System.Exception] "docfx build failed with exit code $lastexitcode."
      }
  displayName: Run docfx
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )

# Make an artifact for debug purpose
- task: ArchiveFiles@2
  displayName: Zipping _site directory
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)\_site' 
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/site.zip' 
    replaceExistingArchive: true 

- task: PublishBuildArtifacts@1
  displayName: Publish deployable artifacts
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: site
    ArtifactType: Container

# commit changes
- powershell: |
    git clone https://github.com/nanoframework/nanoframework.github.io.git -b master origin_site -q
    Copy-Item _site/* origin_site -recurse -Force
    
    cd origin_site > $null

    $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

    git add . -A > $null
    git commit -m "Update documentation from PR" -q > $null
    git -c http.extraheader="AUTHORIZATION: $auth" push origin master -q > $null
  failOnStderr: false
  ignoreLASTEXITCODE: true
  condition: >-
    and(
      succeeded(), 
      or(
        eq(variables['BUILD_ALL'], 'true'),
        contains(variables['BuildOptions.COMMIT_MESSAGE'], '***BUILD_ALL***'),
        eq(variables['BuildOptions.BUILD_ALL'], 'true')
      )
    )
  displayName: Commit changes

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
